import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {CategoryDto, CategoryFilter} from '../../../api/dto/categoryDto.ts';
import {FilterDirectionEnum} from "../../../api/dto/common.ts";
import {categoryApiClient} from "../../../api";

export interface CategoryState {
    filter: CategoryFilter;
    selectedCategory: CategoryDto | null;
    allCategories: CategoryDto[];
    loading: boolean;
    error: string | null;
}

const initialState: CategoryState = {
    filter: {
        page: 0,
        size: 10,
        categoryName: "",
        direction: FilterDirectionEnum.ASC
    },
    allCategories: [],
    selectedCategory: null,
    loading: false,
    error: null
};

export const fetchCategories = createAsyncThunk(
    'categories/fetchAll',
    async (filter: CategoryFilter, {rejectWithValue}) => {
        try {
            return await categoryApiClient.getAllCategories(filter);
        } catch (error) {
            return rejectWithValue('Failed to fetch categories');
        }
    }
);

export const fetchCategoryById = createAsyncThunk(
    'categories/fetchById',
    async (id: number, {rejectWithValue}) => {
        try {
            return await categoryApiClient.getCategory(id);
        } catch (error) {
            return rejectWithValue('Failed to fetch category');
        }
    }
);

export const createCategory = createAsyncThunk(
    'categories/create',
    async (newCategory: Omit<CategoryDto, 'categoryId'>, {rejectWithValue}) => {
        try {
            return categoryApiClient.createCategory(newCategory)
        } catch (error) {
            return rejectWithValue('Failed to create category');
        }
    }
);

export const categoriesSlice = createSlice({
    name: 'categories',
    initialState,
    reducers: {
        setPage: (state, action: PayloadAction<number>) => {
            state.filter.page = action.payload;
        },

        setSelectedCategory: (state, action: PayloadAction<CategoryDto | null>) => {
            state.selectedCategory = action.payload;
        },

        setSize: (state, action: PayloadAction<number>) => {
            state.filter.size = action.payload;
        },

        setCategoryName: (state, action: PayloadAction<string>) => {
            state.filter.categoryName = action.payload;
        },

        setDirection: (state, action: PayloadAction<FilterDirectionEnum>) => {
            state.filter.direction = action.payload;
        },
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchCategories.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(fetchCategories.fulfilled, (state, action: PayloadAction<CategoryDto[]>) => {
                state.allCategories = action.payload;
                state.loading = false;
            })
            .addCase(fetchCategories.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload as string;
            })
            .addCase(fetchCategoryById.fulfilled, (state, action: PayloadAction<CategoryDto>) => {
                state.selectedCategory = action.payload;
            })
            .addCase(createCategory.fulfilled, (state, action: PayloadAction<CategoryDto>) => {
                state.loading = false;
                console.log(action);
            })
            .addCase(createCategory.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload as string;
            });
    },
});

// Export the actions generated by createSlice
export const {setPage, setSize, setCategoryName, setDirection, setSelectedCategory} = categoriesSlice.actions;

// Export the reducer to be used in the store
export default categoriesSlice.reducer;